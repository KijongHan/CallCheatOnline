// <auto-generated />
using System;
using CallCheatOnline.Library.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CallCheatOnline.Library.Data.Migrations
{
    [DbContext(typeof(CallCheatOnlineContext))]
    [Migration("20190628231148_AddConstraintsAndRelationships")]
    partial class AddConstraintsAndRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppException", b =>
                {
                    b.Property<int>("AppExceptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExceptionString");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime?>("WhenCreated");

                    b.HasKey("AppExceptionID");

                    b.ToTable("AppException","app");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppSettingItem", b =>
                {
                    b.Property<int>("AppSettingItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppSettingProgramID");

                    b.Property<string>("Environment");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("AppSettingItemID");

                    b.HasIndex("AppSettingProgramID");

                    b.ToTable("AppSettingItem","app");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppSettingProgram", b =>
                {
                    b.Property<int>("AppSettingProgramID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppConfigFilePath");

                    b.Property<string>("ProgramName");

                    b.HasKey("AppSettingProgramID");

                    b.ToTable("AppSettingProgram","app");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumComment", b =>
                {
                    b.Property<int>("ForumCommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent");

                    b.Property<int?>("ForumThreadID");

                    b.Property<int?>("ForumUserID");

                    b.Property<DateTime>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("ForumCommentID");

                    b.HasIndex("ForumThreadID");

                    b.HasIndex("ForumUserID")
                        .IsUnique()
                        .HasFilter("[ForumUserID] IS NOT NULL");

                    b.ToTable("ForumComment","forum");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumLike", b =>
                {
                    b.Property<int>("ForumLikeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForumCommentID");

                    b.Property<int?>("ForumThreadID");

                    b.Property<int?>("ForumUserID");

                    b.Property<int>("LikeWeight");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("ForumLikeID");

                    b.HasIndex("ForumCommentID");

                    b.HasIndex("ForumThreadID");

                    b.HasIndex("ForumUserID")
                        .IsUnique()
                        .HasFilter("[ForumUserID] IS NOT NULL");

                    b.ToTable("ForumLike","forum");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumThread", b =>
                {
                    b.Property<int>("ForumThreadID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("ForumTopicID");

                    b.Property<int?>("ForumUserID");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("ForumThreadID");

                    b.HasIndex("ForumTopicID");

                    b.HasIndex("ForumUserID")
                        .IsUnique()
                        .HasFilter("[ForumUserID] IS NOT NULL");

                    b.ToTable("ForumThread","forum");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumTopic", b =>
                {
                    b.Property<int>("ForumTopicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("ForumTopicID");

                    b.ToTable("ForumTopic","forum");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumUser", b =>
                {
                    b.Property<int>("ForumUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserLoginID");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("ForumUserID");

                    b.HasIndex("UserLoginID");

                    b.ToTable("ForumUser","forum");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.GameUser", b =>
                {
                    b.Property<int>("GameUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameScore");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("GameUserID");

                    b.ToTable("GameUser","game");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserFriendship", b =>
                {
                    b.Property<int>("UserFromID");

                    b.Property<int>("UserToID");

                    b.Property<int?>("UserRoleID");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("UserFromID", "UserToID");

                    b.HasIndex("UserRoleID");

                    b.HasIndex("UserToID");

                    b.ToTable("UserFriendship","auth");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserLogin", b =>
                {
                    b.Property<int>("UserLoginID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<int>("ForumUserID");

                    b.Property<int>("GameUserID");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Username");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("UserLoginID");

                    b.HasIndex("ForumUserID")
                        .IsUnique();

                    b.HasIndex("GameUserID")
                        .IsUnique();

                    b.ToTable("UserLogin","auth");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserLoginAndRole", b =>
                {
                    b.Property<int>("UserLoginID");

                    b.Property<int>("UserRoleID");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("UserLoginID", "UserRoleID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("UserLoginAndRole","auth");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName");

                    b.Property<DateTime?>("WhenCreated");

                    b.Property<DateTime?>("WhenDeleted");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRole","auth");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppSettingItem", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.AppSettingProgram", "AppSettingProgram")
                        .WithMany("AppSettingItems")
                        .HasForeignKey("AppSettingProgramID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumComment", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumThread", "ForumThread")
                        .WithMany("ForumComments")
                        .HasForeignKey("ForumThreadID");

                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumUser", "ForumUser")
                        .WithOne()
                        .HasForeignKey("CallCheatOnline.Library.Data.Model.ForumComment", "ForumUserID");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumLike", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumComment", "ForumComment")
                        .WithMany("ForumLikes")
                        .HasForeignKey("ForumCommentID");

                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumThread", "ForumThread")
                        .WithMany("ForumLikes")
                        .HasForeignKey("ForumThreadID");

                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumUser", "ForumUser")
                        .WithOne()
                        .HasForeignKey("CallCheatOnline.Library.Data.Model.ForumLike", "ForumUserID");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumThread", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumTopic", "ForumTopic")
                        .WithMany("ForumThreads")
                        .HasForeignKey("ForumTopicID");

                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumUser", "ForumUser")
                        .WithOne()
                        .HasForeignKey("CallCheatOnline.Library.Data.Model.ForumThread", "ForumUserID");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumUser", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginID");
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserFriendship", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.UserLogin", "FromUserLogin")
                        .WithMany("UserFriendships")
                        .HasForeignKey("UserFromID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CallCheatOnline.Library.Data.Model.UserRole")
                        .WithMany("UserFriendships")
                        .HasForeignKey("UserRoleID");

                    b.HasOne("CallCheatOnline.Library.Data.Model.UserLogin", "ToUserLogin")
                        .WithMany("UserFriendshipsOf")
                        .HasForeignKey("UserToID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserLogin", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.ForumUser", "ForumUser")
                        .WithOne()
                        .HasForeignKey("CallCheatOnline.Library.Data.Model.UserLogin", "ForumUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCheatOnline.Library.Data.Model.GameUser", "GameUser")
                        .WithOne()
                        .HasForeignKey("CallCheatOnline.Library.Data.Model.UserLogin", "GameUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserLoginAndRole", b =>
                {
                    b.HasOne("CallCheatOnline.Library.Data.Model.UserLogin", "UserLogin")
                        .WithMany("UserLoginAndRoles")
                        .HasForeignKey("UserLoginID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallCheatOnline.Library.Data.Model.UserRole", "UserRole")
                        .WithMany("UserLoginAndRoles")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
