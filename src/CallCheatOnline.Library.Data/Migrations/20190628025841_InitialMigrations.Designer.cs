// <auto-generated />
using System;
using CallCheatOnline.Library.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CallCheatOnline.Library.Data.Migrations
{
	[DbContext(typeof(CallCheatOnlineContext))]
	[Migration("20190628025841_InitialMigrations")]
	partial class InitialMigrations
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppException", b =>
				{
					b.Property<int>("AppExceptionID")
						.ValueGeneratedOnAdd()
						.HasColumnName("AppExceptionID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ExceptionString")
						.HasColumnName("ExceptionString");

					b.Property<string>("Message")
						.HasColumnName("Message");

					b.Property<string>("StackTrace")
						.HasColumnName("StackTrace");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.HasKey("AppExceptionID");

					b.ToTable("AppException","app");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppSettingItem", b =>
				{
					b.Property<int>("AppSettingItemID")
						.ValueGeneratedOnAdd()
						.HasColumnName("AppSettingItemID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int>("AppSettingProgramID")
						.HasColumnName("AppSettingProgramID");

					b.Property<string>("Environment")
						.HasColumnName("Environment");

					b.Property<string>("Key")
						.HasColumnName("Key");

					b.Property<string>("Value")
						.HasColumnName("Value");

					b.HasKey("AppSettingItemID");

					b.ToTable("AppSettingItem","app");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.AppSettingProgram", b =>
				{
					b.Property<int>("AppSettingProgramID")
						.ValueGeneratedOnAdd()
						.HasColumnName("AppSettingProgramID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("AppConfigFilePath")
						.HasColumnName("AppConfigFilePath");

					b.Property<string>("ProgramName")
						.HasColumnName("ProgramName");

					b.HasKey("AppSettingProgramID");

					b.ToTable("AppSettingProgram","app");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumComment", b =>
				{
					b.Property<int>("ForumCommentID")
						.ValueGeneratedOnAdd()
						.HasColumnName("ForumCommentID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("CommentContent")
						.HasColumnName("CommentContent");

					b.Property<int?>("ForumThreadID")
						.HasColumnName("ForumThreadID");

					b.Property<int?>("ForumUserID")
						.HasColumnName("ForumUserID");

					b.Property<DateTime>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("ForumCommentID");

					b.ToTable("ForumComment","forum");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumLike", b =>
				{
					b.Property<int>("ForumLikeID")
						.ValueGeneratedOnAdd()
						.HasColumnName("ForumLikeID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int?>("ForumCommentID")
						.HasColumnName("ForumCommentID");

					b.Property<int?>("ForumThreadID")
						.HasColumnName("ForumThreadID");

					b.Property<int?>("ForumUserID")
						.HasColumnName("ForumUserID");

					b.Property<int>("LikeWeight")
						.HasColumnName("LikeWeight");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("ForumLikeID");

					b.ToTable("ForumLike","forum");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumThread", b =>
				{
					b.Property<int>("ForumThreadID")
						.ValueGeneratedOnAdd()
						.HasColumnName("ForumThreadID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Content")
						.HasColumnName("Content");

					b.Property<int?>("ForumTopicID")
						.HasColumnName("ForumTopicID");

					b.Property<int?>("ForumUserID")
						.HasColumnName("ForumUserID");

					b.Property<string>("Title")
						.HasColumnName("Title");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("ForumThreadID");

					b.ToTable("ForumThread","forum");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumTopic", b =>
				{
					b.Property<int>("ForumTopicID")
						.ValueGeneratedOnAdd()
						.HasColumnName("ForumTopicID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Description")
						.HasColumnName("Description");

					b.Property<string>("Title")
						.HasColumnName("Title");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("ForumTopicID");

					b.ToTable("ForumTopic","forum");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.ForumUser", b =>
				{
					b.Property<int>("ForumUserID")
						.ValueGeneratedOnAdd()
						.HasColumnName("ForumUserID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("ForumUserID");

					b.ToTable("ForumUser","forum");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.GameUser", b =>
				{
					b.Property<int>("GameUserID")
						.ValueGeneratedOnAdd()
						.HasColumnName("GameUserID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int>("GameScore")
						.HasColumnName("GameScore");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("GameUserID");

					b.ToTable("GameUser","game");
				});

			modelBuilder.Entity("CallCheatOnline.Library.Data.Model.UserRole", b =>
				{
					b.Property<int>("UserRoleID")
						.ValueGeneratedOnAdd()
						.HasColumnName("UserRoleID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("RoleName")
						.HasColumnName("RoleName");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("UserRoleID");

					b.ToTable("UserRole","auth");
				});

			modelBuilder.Entity("UserLogin", b =>
				{
					b.Property<int>("UserLoginID")
						.ValueGeneratedOnAdd()
						.HasColumnName("UserLoginID")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Email")
						.HasColumnName("Email");

					b.Property<int>("ForumUserID")
						.HasColumnName("ForumUserID");

					b.Property<int>("GameUserID")
						.HasColumnName("GameUserID");

					b.Property<string>("PasswordHash")
						.HasColumnName("PasswordHash");

					b.Property<string>("PasswordSalt")
						.HasColumnName("PasswordSalt");

					b.Property<string>("Username")
						.HasColumnName("Username");

					b.Property<DateTime?>("WhenCreated")
						.HasColumnName("WhenCreated");

					b.Property<DateTime?>("WhenDeleted")
						.HasColumnName("WhenDeleted");

					b.HasKey("UserLoginID");

					b.ToTable("UserLogin","auth");
				});
#pragma warning restore 612, 618
		}
	}
}
