<head>
    <link rel="stylesheet" type="text/css" href="~/css/app.css"></link>
    <script src="~/lib/signalr-client-1.0.0-alpha2-final.min.js"></script>
    <script src="~/lib/knockout-3.4.2.js"></script>
    <script src="~/js/models/ChatMessage.js"></script>
    <script src="~/js/models/User.js"></script>
    <script src="~/js/models/GameLobby.js"></script>
    <script src="~/js/viewmodels/ChatRoomViewModel.js"></script>
    <script src="~/js/viewmodels/ChatRoomsViewModel.js"></script>
    <script src="~/js/viewmodels/GameLobbyViewModel.js"></script>
    <script src="~/js/viewmodels/GameLobbiesViewModel.js"></script>
    <script src="~/js/viewmodels/LoginViewModel.js"></script>
</head>
<body>
    <div id="login">
        <input id="username" data-bind="value: username"></input>
        <input id="password" data-bind="value: password"></input>
        <button data-bind="click: login">login</button>
    </div>

    <button onclick="setConnections()">Set Connections</button>

    <div id="chatRooms">
        <button data-bind="click: getChatRooms">Refresh Chat Rooms</button>
        <div data-bind="foreach: chatRooms">
            <div data-bind="text: chatRoomName"></div>

            <div data-bind="foreach: chatMessages">
                <div data-bind="text: userName"></div>
                <div data-bind="text: userID"></div>
                <div data-bind="text: messageContent"></div>
                <div data-bind="text: whenCreated"></div>
            </div>

            <div data-bind="foreach: users">
                <div data-bind="text: userName"></div>
            </div>

            <input data-bind="value: chatMessageInput"></input>
            <button data-bind="click: joinChatRoom">Join Chat Room</button>
            <button data-bind="click: sendMessage">Send Message</button>
        </div>
    </div>
    
    <div id="gameLobbies">
        <div data-bind="foreach: gameLobbies">
            <div data-bind="text: gameLobbyName"></div>
            <div data-bind="text: gameLobbyID"></div>
            <div data-bind="text: hostUserName"></div>
            <button data-bind="click: joinGameLobby">Join Game Lobby</button>
        </div>

        <button data-bind="click: getGameLobbies">Get Game Lobbies</button>
    </div>

    <div id="currentGameLobby">
        <div data-bind="text: gameLobbyName"></div>
        <div data-bind="text: host.userName"></div>
        <div data-bind="text: gameLobbyID"></div>

        <div data-bind="foreach: players">
            <div data-bind="text: userName"></div>
        </div>
        <div data-bind="foreach: gameLobbyMessages">
            <div data-bind="text: messageContent"></div>
        </div>

        <input data-bind="value: gameLobbyMessage"></input>
        <button data-bind="click: startGame">Start Game</button>
        <button data-bind="click: leaveGameLobby">Leave Game Lobby</button>
        <button data-bind="click: sendMessageGameLobby">Send Message</button>
    </div>

    <div id="gameLobby">
        <input data-bind="value: gameLobbyName"></input>
        <input data-bind="value: maxRoomLimit"></input>
        <button data-bind="click: createGameLobby">Create Game Lobby</button>
    </div>

    <button onclick="testSend()">Test</button>
</body>

<script>
    var token = null;
    var chatHub = new signalR.HttpConnection(`http://localhost:50249/chat`);
    var gameLobbyHub = new signalR.HttpConnection(`http://localhost:50249/gamelobby`);
    var chatConnection = new signalR.HubConnection(chatHub);
    var gameLobbyConnection = new signalR.HubConnection(gameLobbyHub);

    var chatRoomsViewModel = new ChatRoomsViewModel(chatConnection);
    var gameLobbiesViewModel = new GameLobbiesViewModel(gameLobbyConnection);
    var currentGameLobby = new GameLobbyViewModel(gameLobbyConnection, null);

    ko.applyBindings(new LoginViewModel(), document.getElementById("login"));
    ko.applyBindings(chatRoomsViewModel, document.getElementById("chatRooms"));
    ko.applyBindings(gameLobbiesViewModel, document.getElementById("gameLobbies"));
    ko.applyBindings(new GameLobbyViewModel(gameLobbyConnection, null), document.getElementById("gameLobby"));
    ko.applyBindings(currentGameLobby, document.getElementById("currentGameLobby"));

    function setConnections() {
        setChatConnections(chatConnection);
        setGameLobbyConnections(gameLobbyConnection);
    }

    function setChatConnections(connection) {
        connection.on('ChatSendMessage', function(chatMessage, isSender, chatRoomName) {
            console.log(chatMessage + isSender + chatRoomName);
            var chatRoom = chatRoomsViewModel.chatRooms().find(function(element) {
                return element.chatRoomName() == chatRoomName;
            });
            chatRoom.chatMessages.push(new ChatMessage(chatMessage));
        });

        connection.on('ChatUserDisconnected', function(disconnectedUser, chatRoomName) {
            console.log(disconnectedUser.UserName + " has disconnected "  + chatRoomName);

            var chatRoom = chatRoomsViewModel.chatRooms().find(function(element) {
                return element.chatRoomName() == chatRoomName;
            });

            for(var i = 0; i < chatRoom.users().length; i++) {
                var user = chatRoom.users()[i];
                console.log(user.userName);
                if(user.userName == disconnectedUser.UserName) {
                    chatRoom.users.remove(user);
                }
            }
        });
        connection.on('ChatRoomJoin', function(newUser, users, isNewChatUser, chatRoomName) {
            console.log(newUser.UserName + " has entered chatroom " + chatRoomName);

            var chatRoom = chatRoomsViewModel.chatRooms().find(function(element) {
                return element.chatRoomName() == chatRoomName;
            });

            if(isNewChatUser) {
                for(var i = 0; i < users.length; i++) {
                    console.log(users[i])
                    chatRoom.users.push(new User(users[i]));
                }
            }
            else {
                chatRoom.users.push(new User(newUser));
            }
        });

        connection.start();
    }

    function setGameLobbyConnections(connection) {
        connection.on('GameLobbyJoin', function(success, host, players, newUser, isNewUser, gameLobbyID) {
            console.log(success + " " + host + " " + players + " " + newUser + " " + isNewUser + gameLobbyID);
            if(success) {
                console.log("new user joined game lobby: " + newUser);
                console.log(newUser.userName);
                currentGameLobby.host(host);
                currentGameLobby.players(players);
                currentGameLobby.gameLobbyID(gameLobbyID);
            }
        });
        
        connection.on('GameLobbySendMessage', function(chatMessage, isSender) {
            var message = new ChatMessage(chatMessage);
            currentGameLobby.gameLobbyMessages.push(message);
        });

        connection.on('GameLobbyStartGame', function(turn) {
            console.log(turn);
            currentGameLobby.gameState();
        });

        connection.on('GameState', function(gameState) {
            console.log(gameState);
        });

        connection.start();
    }

    function testSend() {
        chatConnection.invoke("ChatSendMessage", "Test", "General Chat");
    }

    function testCookie() {
        fetch("http://localhost:50249/api/test/authorized", {
          method: 'GET',
          credentials: 'include'
        }).then(res => {
          console.log(res.headers.get('set-cookie')); // undefined
          console.log(document.cookie); // nope
          return res.json();
        }).then(json => {
          if (json.success) {
            this.setState({ error: '' });
            this.context.router.push(json.redirect);
          }
          else {
            this.setState({ error: json.error });
          }
        });
    }
</script>