function ChatMessage(data) {
    var self = this;

    self.userName = data.UserName;
    self.userID = data.UserID;
    self.messageContent = data.MessageContent;
    self.whenCreated = data.WhenCreated;
    console.log(this);

    self.userNameInfo = ko.computed(function() {
        return self.userName + ": "
    });
}
function GameLobby(data) {
    this.gameLobbyID = data.gameLobbyID;
    this.gameLobbyName = data.gameLobbyName;
    this.hostUserName = data.hostUserName;
    console.log(this);
}
function User(data) {
    this.userName = data.UserName;
}
function AlertMessageViewModel() {
    var self = this;

    self.title = ko.observable();
    self.message = ko.observable();
    self.isVisible = ko.observable(false);

    self.cssDisplay = ko.computed(function() {
        if(self.isVisible() == true) {
            return "inline";
        }
        else {
            return "none";
        }
    });

    self.activateCard = ko.computed(function() {
        if(self.isVisible()) {
            return "card activate";
        }
        else {
            return "card";
        }
    });

    self.showLoginFailed = function() {
        self.title("Login Error");
        self.message("Incorrect username and/or password");
        self.isVisible(true);
    }

    self.showLoginMissingInput = function() {
        self.title("Login Error");
        self.message("Please fill out username and password fields");
        self.isVisible(true);
    }

    self.showRegisterMissingInput = function() {
        self.title("Registration Error");
        self.message("Please fill out username, email and password fields");
        self.isVisible(true);
    }

    self.showRegisterSuccessful = function() {
        self.title("Registration Successful");
        self.message("Registration has successfully completed");
        self.isVisible(true);
    }

    self.showRegisterUnsuccessful = function() {
        self.title("Registration Error");
        self.message("There already exists a user with the same username or email!");
        self.isVisible(true);
    }
    
    self.confirmMessage = function() {
        self.isVisible(false);
    }
}
function ChatRoomsViewModel(connection) {
    var self = this;

    self.connection = connection;
    self.chatRooms = ko.observableArray();
    self.onlineUsers = ko.observableArray();
    self.selectedChatRoom = ko.observable(new ChatRoomViewModel(self, connection, {"chatRoomName": "", "participants": []}));

    self.onlineUsersCount = ko.computed(function() {
        return self.onlineUsers().length + " Players";
    });

    self.hasChat = ko.computed(function() {
        if(self.chatRooms().length>0) {
            return "inline";
        }
        else {
            return "none";
        }
    });

    self.getChatRooms = function() {
        self.chatRooms.removeAll();
        fetch(webAPIIPAddress + "/api/chatrooms", {
            method: 'GET',
            credentials: 'include'
        }).then(response => {
            response.json().then(function(data) {
                console.log(data);
                data.forEach(function(element) {
                    self.chatRooms.push(new ChatRoomViewModel(self, connection, element));
                });
            });
        })
    }

    self.selectChatRoom = function(chatRoom) {
        if(self.selectedChatRoom() == chatRoom) {
            deactivateCurrentChatRoomCard();
            self.selectedChatRoom(new ChatRoomViewModel(self, connection, {"chatRoomName": "", "participants": []}));
        }
        else {
            activateCurrentChatRoomCard();
            self.selectedChatRoom(chatRoom);
        }
        
    }
}
function ChatRoomViewModel(chatRoomsViewModel, connection, data) {
    var self = this;

    self.chatRoomsViewModel = chatRoomsViewModel;
    self.connection = connection;
    
    self.chatRoomName = ko.observable();
    self.chatMessageInput = ko.observable();
    self.chatMessages = ko.observableArray();
    self.users = ko.observableArray(data.participants);
    self.inChat = ko.observable(false);

    self.usersCount = ko.computed(function() {
        return self.users().length + " Users";
    });

    self.chatRoomName(data.chatRoomName);
    console.log(self.chatRoomName() + " " + data);

    self.sendMessage = function() {
        var message = self.chatMessageInput();
        self.chatMessageInput("");
        self.connection.invoke("ChatSendMessage", message, self.chatRoomName());
    }

    self.joinChatRoom = function() {
        self.connection.invoke('ChatRoomJoin', self.chatRoomName());
    }

    self.selectChatRoom = function() {
        chatRoomsViewModel.selectChatRoom(self);
    }

    self.onKeyDown = function(d, e) {
        if(e.keyCode===13) {
            self.sendMessage();
        }
        return true;
    }
}
function GameCardViewModel(data) {
    var self = this;
    self.suit = ko.observable(data.Suit);
    self.rank = ko.observable(data.Rank);
    self.selected = ko.observable(false);

    self.cssClass = ko.computed(function() {
        if(self.selected()) {
            return "cardFront selected";
        }
        else {
            return "cardFront";
        }
    });

    self.select = function() {
        var isCurrentlySelected = self.selected();
        self.selected(!isCurrentlySelected);
    }
}
function GameLobbiesViewModel(connection) {
    var self = this;

    self.connection = connection;
    self.gameLobbies = ko.observableArray();

    self.getGameLobbies = function() {
        self.gameLobbies.removeAll();
        fetch(webAPIIPAddress + "/api/gamelobbies", {
            method: 'GET',
            credentials: 'include'
        }).then(response => {
            response.json().then(function(data) {
                data.forEach(function(element) {
                    console.log(element);
                    var gameLobby = new GameLobbyViewModel(connection, element);
                    console.log(gameLobby);
                    self.gameLobbies.push(gameLobby);
                });
            });
        })
    }
}
function GameLobbyViewModel(connection, data) {
    var self = this;
    
    self.connection = connection;
    self.gameLobbyMessage = ko.observable(null);
    self.gameLobbyID = ko.observable(null);
    self.gameLobbyName = ko.observable(null);
    self.hostUserName = ko.observable(null);
    self.maxRoomLimit = ko.observable(null);
    self.host = ko.observable(null);
    self.players = ko.observableArray();
    self.gameLobbyMessages = ko.observableArray();
    self.userCount = ko.observable(null);

    self.hand = ko.observableArray();
    self.rankClaim = ko.observable();
    console.log(data);

    self.maxRoomLimitOptions = ko.observableArray([4, 5, 6, 7, 8]);

    self.userCountLimitFraction = ko.computed(function() {
        return self.userCount() + "/" + self.maxRoomLimit();
    });

    self.hostInfo = ko.computed(function() {
        return "Host: " + self.hostUserName();
    });

    if(data != null) {
        self.gameLobbyID(data.gameLobbyID);
        self.gameLobbyName(data.gameLobbyName);
        self.hostUserName(data.hostUserName);
        self.userCount(data.userCount);
        self.maxRoomLimit(data.maxRoomLimit);
        console.log("From game lobby viewmodel" + data.gameLobbyID + data.gameLobbyName);
    }

    self.gameState = function() {
        self.connection.invoke("GameState", self.gameLobbyID());
    }

    self.startGame = function() {
        self.connection.invoke("GameLobbyStartGame", self.gameLobbyID());
    }   

    self.gameCallCheat = function() {
        self.connection.invoke("GameCallCheat", self.gameLobbyID());
    }

    self.gameEndTurn = function() {
        self.connection.invoke("GameEndTurn", self.gameLobbyID());
    }

    self.gameClaim = function() {
        var selectedCards = [];
        for(var i = 0; i < self.hand().length; i++) {
            if(self.hand()[i].selected()) {
                var card = { 
                    "Rank": self.hand()[i].rank(),
                    "Suit": self.hand()[i].suit()
                };
                selectedCards.push(card);
            }
        }
        var claims = [];
        for(var j = 0; j < selectedCards.length; j++) {
            var claim = { "Rank": self.rankClaim() };
            claims.push(claim);
        }
        self.connection.invoke("GameClaim", self.gameLobbyID(), claims, selectedCards);
    }

    self.leaveGameLobby = function() {
        self.connection.invoke("GameLobbyLeave", self.gameLobbyID());
    }

    self.joinGameLobby = function() {
        self.connection.invoke("GameLobbyJoin", self.gameLobbyID());
    }

    self.sendMessageGameLobby = function() {
        self.connection.invoke("GameLobbySendMessage", self.gameLobbyMessage(), self.gameLobbyID());
        self.gameLobbyMessage(null);
    }

    self.createGameLobby = function() {
        fetch(webAPIIPAddress + "/api/gamelobbies", {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
                gameLobbyName: self.gameLobbyName(),
                maxRoomLimit: self.maxRoomLimit(),
            }),
        }).then(response => {
            response.json().then(function(data) {
                console.log(data);
                self.connection.invoke("GameLobbyJoin", data.gameLobbyID);
            });
        });
    }

    self.onKeyDown = function(d, e) {
        if(e.keyCode===13) {
            self.sendMessageGameLobby();
        }
        return true;
    }

    self.goBack = function() {
        leaveGameCreation();
    }
}
function LoginViewModel(alertMessageViewModel) {
    var self = this;

    self.alertMessageViewModel = alertMessageViewModel;
    self.username = ko.observable(null);
    self.password = ko.observable(null);

    self.login = function() {
        if(self.username()==null || self.password()==null) {
            alertMessageViewModel.showLoginMissingInput();
            return;
        }

        fetch(webAPIIPAddress + "/api/authentication/login", {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
                username: self.username(),
                password: self.password(),
            })
        }).then(response => {
            if(response.ok) {
                loginSuccessful();
            }
            else {
                alertMessageViewModel.showLoginFailed();
            }
        });
    }
}
function RegisterViewModel(alertMessageViewModel) {
    var self = this;

    self.alertMessageViewModel = alertMessageViewModel;
    self.username = ko.observable(null);
    self.password = ko.observable(null);
    self.email = ko.observable(null);

    self.register = function() {
        if(self.username()==null || self.username()=="" || self.password()==null || self.password()=="" || self.email() == null) {
            alertMessageViewModel.showRegisterMissingInput();
            return;
        }

        fetch(webAPIIPAddress + "/api/authentication", {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
                username: self.username(),
                password: self.password(),
                email: self.email()
            }),
        }).then(response => {
            if(response.ok) {
                alertMessageViewModel.showRegisterSuccessful();
                registerSuccessful();
            }
            else {
                alertMessageViewModel.showRegisterUnsuccessful();
            }
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
